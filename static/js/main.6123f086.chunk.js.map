{"version":3,"sources":["components/Header.js","components/context/AppReducer.js","components/context/GlobalState.js","components/Balance.js","components/IncomeExpenses.js","components/Transaction.js","components/TransactionList.js","components/AddTransaction.js","App.js","serviceWorker.js","index.js"],"names":["Header","state","action","type","transactions","filter","transaction","id","payload","initialState","JSON","parse","localStorage","getItem","GlobalContext","createContext","GlobalProvider","children","useReducer","AppReducer","dispatch","useEffect","setItem","stringify","Provider","value","deleteTransaction","addTransaction","Balance","total","useContext","map","amount","reduce","acc","item","toFixed","IncomeExpenses","amounts","income","expense","className","Transaction","sign","text","Math","abs","onClick","TransactionList","key","AddTransaction","useState","setText","setAmount","onSubmit","e","preventDefault","newTransaction","uuidv4","htmlFor","onChange","target","placeholder","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.6123f086.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Header = () => {\n    return (\n        <h2>\n            Expense Tracker\n        </h2>\n    );\n};\n\nexport default Header;\n","export default (state, action) => {\n  switch (action.type) {\n    case \"DELETE_TRANSACTION\":\n      return {\n        ...state,\n        transactions: state.transactions.filter(\n          (transaction) => transaction.id !== action.payload\n        ),\n      };\n    case \"ADD_TRANSACTION\":\n      return {\n        ...state,\n        transactions: [action.payload, ...state.transactions],\n      };\n    default:\n      return state;\n  }\n};\n","import React, { createContext, useReducer, useEffect } from \"react\";\nimport AppReducer from \"./AppReducer\";\n\nconst localStorageState = JSON.parse(localStorage.getItem(\"state\"));\nconst initialState = localStorageState || {\n  transactions: [],\n};\n\n//Create context\nexport const GlobalContext = createContext(initialState);\n\n//Provider component\nexport const GlobalProvider = ({ children }) => {\n  const [state, dispatch] = useReducer(AppReducer, initialState);\n\n  useEffect(() => {\n    localStorage.setItem(\"state\", JSON.stringify(state));\n  }, [state]);\n\n  // Actions\n  function deleteTransaction(id) {\n    dispatch({\n      type: \"DELETE_TRANSACTION\",\n      payload: id,\n    });\n  }\n\n  function addTransaction(transaction) {\n    dispatch({\n      type: \"ADD_TRANSACTION\",\n      payload: transaction,\n    });\n  }\n  return (\n    <GlobalContext.Provider\n      value={{\n        transactions: state.transactions,\n        deleteTransaction,\n        addTransaction,\n      }}\n    >\n      {children}\n    </GlobalContext.Provider>\n  );\n};\n","import React, { useContext } from \"react\";\nimport { GlobalContext } from \"./context/GlobalState\";\n\nconst Balance = () => {\n  const { transactions } = useContext(GlobalContext);\n\n  const amounts = transactions.map((transaction) => transaction.amount);\n  const total = amounts.reduce((acc, item) => (acc += item), 0).toFixed(2);\n  return (\n    <>\n      <h4>Your Balance</h4>\n      <h1>£{total}</h1>\n    </>\n  );\n};\n\nexport default Balance;\n","import React, { useContext } from \"react\";\nimport { GlobalContext } from \"./context/GlobalState\";\n\nconst IncomeExpenses = () => {\n  const { transactions } = useContext(GlobalContext);\n  const amounts = transactions.map((transaction) => transaction.amount);\n\n  const income = amounts\n    .filter((item) => item > 0)\n    .reduce((acc, item) => (acc += item), 0)\n    .toFixed(2);\n\n  const expense = (\n    amounts.filter((item) => item < 0).reduce((acc, item) => (acc += item), 0) *\n    -1\n  ).toFixed(2);\n\n  return (\n    <div className=\"inc-exp-container\">\n      <div>\n        <h4>Income</h4>\n        <p className=\"money plus\">{income}</p>\n      </div>\n      <div>\n        <h4>Expense</h4>\n        <p className=\"money minus\">{expense}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default IncomeExpenses;\n","import React, { useContext } from \"react\";\nimport { GlobalContext } from \"./context/GlobalState\";\n\nconst Transaction = ({ transaction }) => {\n  const { deleteTransaction } = useContext(GlobalContext);\n  const sign = transaction.amount < 0 ? \"-\" : \"+\";\n\n  return (\n    <div>\n      <li className={transaction.amount < 0 ? \"minus\" : \"plus\"}>\n        {transaction.text}\n        <span>\n          {sign}£{Math.abs(transaction.amount)}\n        </span>\n        <button\n          onClick={() => deleteTransaction(transaction.id)}\n          className=\"delete-btn\"\n        >\n          x\n        </button>\n      </li>\n    </div>\n  );\n};\n\nexport default Transaction;\n","import React, { useContext } from \"react\";\nimport Transaction from \"./Transaction\";\nimport { GlobalContext } from \"./context/GlobalState\";\n\nconst TransactionList = () => {\n  const { transactions } = useContext(GlobalContext);\n\n  return (\n    <>\n      <h3>History</h3>\n      <ul className=\"list\">\n        {transactions.map((transaction) => (\n          <Transaction key={transaction.id} transaction={transaction} />\n        ))}\n      </ul>\n    </>\n  );\n};\n\nexport default TransactionList;\n","import React, { useState, useContext } from \"react\";\nimport { v4 as uuidv4 } from \"uuid\";\n\nimport { GlobalContext } from \"./context/GlobalState\";\n\nconst AddTransaction = () => {\n  const [text, setText] = useState(\"\");\n  const [amount, setAmount] = useState(\"\");\n\n  const { addTransaction } = useContext(GlobalContext);\n\n  const onSubmit = (e) => {\n    e.preventDefault();\n\n    const newTransaction = {\n      id: uuidv4(),\n      text,\n      amount: +amount,\n    };\n    addTransaction(newTransaction);\n    setText(\"\");\n    setAmount(\"\");\n  };\n\n  return (\n    <>\n      <h3>Add new transaction</h3>\n      <form onSubmit={onSubmit}>\n        <div className=\"form-control\">\n          <label htmlFor=\"text\">Text</label>\n          <input\n            type=\"text\"\n            value={text}\n            onChange={(e) => setText(e.target.value)}\n            placeholder=\"Enter text...\"\n          />\n        </div>\n        <div className=\"form-control\">\n          <label htmlFor=\"amount\">\n            Amount <br />\n            (negative - expense, positive - income)\n          </label>\n          <input\n            type=\"number\"\n            value={amount}\n            onChange={(e) => setAmount(e.target.value)}\n            placeholder=\"Enter amount...\"\n          />\n        </div>\n        <button className=\"btn\">Add transaction</button>\n      </form>\n    </>\n  );\n};\n\nexport default AddTransaction;\n","import React from \"react\";\nimport Header from \"./components/Header\";\nimport Balance from \"./components/Balance\";\nimport IncomeExpenses from \"./components/IncomeExpenses\";\nimport TransactionList from \"./components/TransactionList\";\nimport AddTransaction from \"./components/AddTransaction\";\n\nimport { GlobalProvider } from \"./components/context/GlobalState\";\n\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <GlobalProvider>\n      <Header />\n      <div className=\"container\">\n        <Balance />\n        <IncomeExpenses />\n        <TransactionList />\n        <AddTransaction />\n      </div>\n    </GlobalProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}